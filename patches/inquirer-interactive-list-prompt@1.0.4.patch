diff --git a/index.mjs b/index.mjs
index 68c3aefdcf2b5b9ba8be4e8a49356d69d60d0091..6447095bbd4c1790415e150b131df88057ca2119 100644
--- a/index.mjs
+++ b/index.mjs
@@ -6,62 +6,64 @@ import {
   isEnterKey,
   isUpKey,
   isDownKey,
-} from '@inquirer/core';
-import chalk from 'chalk';
-import readline from 'readline';
+} from "@inquirer/core";
+import chalk from "chalk";
+import readline from "readline";
 
 export default async (options) => {
   const {
-    renderSelected = choice => chalk.green(`❯ ${choice.name} (${choice.key})`),
-    renderUnselected = choice => `  ${choice.name} (${choice.key})`,
-    hideCursor = true
+    renderSelected = (choice) =>
+      chalk.green(`❯ ${choice.name} (${choice.key})`),
+    renderUnselected = (choice) => `  ${choice.name} (${choice.key})`,
+    hideCursor = false,
   } = options;
 
   let rl;
   if (hideCursor) {
     rl = readline.createInterface({
       input: process.stdin,
-      output: process.stdout
+      output: process.stdout,
     });
 
-    rl.output.write('\x1B[?25l'); // Hide cursor
+    rl.output.write("\x1B[?25l"); // Hide cursor
   }
 
   const answer = await createPrompt((config, done) => {
     const { choices, default: defaultKey } = config;
-    const [status, setStatus] = useState('pending');
-    const [index, setIndex] = useState(choices.findIndex((choice) => choice.value === defaultKey ?? ''));
+    const [status, setStatus] = useState("pending");
+    const [index, setIndex] = useState(
+      choices.findIndex((choice) => choice.value === defaultKey ?? "")
+    );
     const prefix = usePrefix();
 
     useKeypress((key, _rl) => {
       if (isEnterKey(key)) {
         const selectedChoice = choices[index];
         if (selectedChoice) {
-          setStatus('done');
+          setStatus("done");
           done(selectedChoice.value);
         }
-      } else if (isUpKey(key)) {
-        setIndex(index > 0 ? index - 1 : 0);
-      } else if (isDownKey(key)) {
-        setIndex(index < choices.length - 1 ? index + 1 : choices.length - 1);
       } else {
         const foundIndex = choices.findIndex((choice) => {
-          const choiceValue = choice.value.toLowerCase();
-          const keyName = key.name.toLowerCase();
-          return choiceValue.startsWith(keyName);
+          return choice.key === key.name.toLowerCase();
         });
         if (foundIndex !== -1) {
           setIndex(foundIndex);
+          const choice = choices[foundIndex];
+          if (choice.fn != null) {
+            choice.fn();
+            return;
+          }
           // This automatically finishes the prompt. Remove this if you don't want that.
-          setStatus('done');
-          done(choices[foundIndex].value);
+          setStatus("done");
+          done(choice.value);
         }
       }
-    })
+    });
 
     const message = chalk.bold(config.message);
 
-    if (status === 'done') {
+    if (status === "done") {
       return `${prefix} ${message} ${chalk.cyan(choices[index].name)}`;
     }
 
@@ -73,13 +75,13 @@ export default async (options) => {
 
         return renderUnselected(choice, i);
       })
-      .join('\n');
+      .join("\n");
 
     return [`${prefix} ${message}`, renderedChoices];
   })(options);
 
   if (hideCursor) {
-    rl.output.write('\x1B[?25h'); // Show cursor
+    rl.output.write("\x1B[?25h"); // Show cursor
 
     rl.close();
   }
